#!/usr/bin/env node

var child_process = require('child_process'),
  docopt = require('docopt'),
  multiline = require('multiline'),
  fs = require('fs'),
  path = require('path');

var githubhook = require('../');


var doc = multiline(function() {/*

Usage:
  githubhook [--host=HOST] [--port=PORT] [--callback=URL_PATH] [--secret=SECRET] [--key=KEY_PATH] [--cert=CERT_PATH] [--verbose] <trigger> <script>

Options:

  --host=HOST             Address to listen on
  --port=PORT             Port to listen on
  --callback=URL_PATH     The callback URL path
  --secret=SECRET         The secret you use the in the Github webhook config
  --key=KEY_PATH          Path to read https certificate key file
  --cert=CERT_PATH        Path to read https certificate file
  --verbose                 Log to console
  --version                 Output the version number
  -h, --help                Output usage information

*/});


var options = docopt.docopt(doc, {
  version: require('../package.json').version,
  help: true,
  options_first: false,
  exit: true
});

var githubhookConfig = {
  host: options['--host'],
  port: options['--port'] ? parseInt(options['--port']) : null,
  path: options['--callback'],
  secret: options['--secret'],
  logger: options['--verbose'] ? console : null
};

if (options['--cert']) {
  githubhookConfig.https = {
    key: fs.readFileSync(options['--key']),
    cert: fs.readFileSync(options['--cert'])
  }
}

var github = githubhook(githubhookConfig);

// start it!
github.listen();

// trigger
github.on(options['<trigger>'], function () {
  var scriptPath = path.resolve(options['<script>']);
  var spawnOptions = {};
  var verbose = options['--verbose'];

  var data = Array.prototype.slice.call(arguments).pop();
  var repo = (data && data.repository && data.repository.name) ? data.repository.name : '';
  var ref = (data && data.ref) ? data.ref : '';
  
  if (verbose) {
    console.log('--> EXEC', scriptPath, repo, ref);
    spawnOptions.stdio = 'inherit';
  }

  var child = child_process.spawn(scriptPath, [repo, ref], spawnOptions);
  if (verbose) {
    child.on('error', function (err) {
      console.error(err.stack);
    });

    child.on('close', function () {
      console.log('--- END', scriptPath);
    });
  }
});
